#!/usr/bin/env python

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy.spatial import Voronoi, voronoi_plot_2d, ConvexHull
from scipy import stats
from sklearn.cluster import KMeans
from sampler import *
import itertools


def voronoi_volumes(points, v):
    vol = np.zeros(v.npoints)
    for i, reg_num in enumerate(v.point_region):
        indices = v.regions[reg_num]
        if -1 in indices: # some regions can be opened
            vol[i] = np.inf
        else:
            vol[i] = ConvexHull(v.vertices[indices]).volume
    return vol


if __name__ == "__main__":

    # methods = ['random','lhs','grid']
    # samps = [5,9,12,17,25]
    # n_pts =10
    # n_dims = 2
    # sim_pts = 12000
    # lhc = Sampler(params=n_dims, samples=n_pts)
# 
    ## for meth in methods:
    # for num in samps:
        # lhc.num_samples = num
        # lhc.method = 'grid'
        # lhd = lhc.getRawSamples()
        # xs = lhd[:,0]
        # ys = lhd[:,1]
# 
        # plt.title('Num Samples %i' %(num))
        # plt.scatter(xs, ys)
        # plt.show()

        # dists = []
        # for i in range(len(lhd)):
        #     for j in range(i+1,len(lhd)):
        #         dists.append(np.linalg.norm(lhd[i]-lhd[j]))
        # vals = stats.kstest(lhd[:,0], 'norm')
        # # vals = stats.chisquare(lhd[:,0])

        # vor = Voronoi(lhd)
        # vols = voronoi_volumes(lhd,vor)
       
        # print(lhc.method)
        # print(vals)
        # print('Median Dist: %f' %(np.median(dists)))
        # print('Mean Dist: %f' %(np.mean(dists)))
        # print('Dev Dist: %f' %(np.std(dists)))
        # # plt.scatter(xs, ys)
        # fig = voronoi_plot_2d(vor)
        # plt.title(lhc.method)
        # plt.show()


    # ls = []
    # for i in range(n_dims):
    #     ls.append(np.linspace(0,1,int(np.round(np.power(sim_pts,1/float(n_dims)),0))))
    # sim_pts = list(itertools.product(*ls))


    # samples = KMeans(n_pts).fit(sim_pts).cluster_centers_

    # if n_dims == 2:
    #     plt.scatter(samples[:,0], samples[:,1])

    # elif n_dims == 3:
    #     fig = plt.figure()
    #     ax = fig.add_subplot(111, projection='3d')
    #     ax.scatter(samples[:,0], samples[:,1], samples[:,2])
    # plt.show()




    a = [[[0.1378427521303115, 492.0], [0.26800311907726604, 492.0], [0.5837932661603281, 492.0], [0.7402337246921062, 492.0], [0.8920911240889483, 492.0], [0.1378427521303115, 463.0], [0.26800311907726604, 463.0], [0.5837932661603281, 463.0], [0.7402337246921062, 463.0], [0.8920911240889483, 463.0], [0.1378427521303115, 491.0], [0.26800311907726604, 491.0], [0.5837932661603281, 491.0], [0.7402337246921062, 491.0], [0.8920911240889483, 491.0], [0.1378427521303115, 490.0], [0.26800311907726604, 490.0], [0.5837932661603281, 490.0], [0.7402337246921062, 490.0], [0.8920911240889483, 490.0], [0.1378427521303115, 491.0], [0.26800311907726604, 491.0], [0.5837932661603281, 491.0], [0.7402337246921062, 491.0], [0.8920911240889483, 491.0], [0.26800311907726604, 491.0], [0.7402337246921062, 491.0], [0.5837932661603281, 491.0], [0.8920911240889483, 491.0], [0.4071553901088778, 491.0], [0.26800311907726604, 490.0], [0.7402337246921062, 490.0], [0.5837932661603281, 490.0], [0.8920911240889483, 490.0], [0.4071553901088778, 490.0], [0.26800311907726604, 491.0], [0.7402337246921062, 491.0], [0.5837932661603281, 491.0], [0.8920911240889483, 491.0], [0.4071553901088778, 491.0], [0.26800311907726604, 491.0], [0.7402337246921062, 491.0], [0.5837932661603281, 491.0], [0.8920911240889483, 491.0], [0.4071553901088778, 491.0], [0.26800311907726604, 490.0], [0.7402337246921062, 490.0], [0.5837932661603281, 490.0], [0.8920911240889483, 490.0], [0.4071553901088778, 490.0], [0.7402337246921062, 492.0], [0.4071553901088778, 492.0], [0.26800311907726604, 492.0], [0.5837932661603281, 492.0], [0.7402337246921062, 492.0], [0.7402337246921062, 491.0], [0.4071553901088778, 491.0], [0.26800311907726604, 491.0], [0.5837932661603281, 491.0], [0.7402337246921062, 491.0], [0.7402337246921062, 490.0], [0.4071553901088778, 490.0], [0.26800311907726604, 490.0], [0.5837932661603281, 490.0], [0.7402337246921062, 490.0], [0.7402337246921062, 491.0], [0.4071553901088778, 491.0], [0.26800311907726604, 491.0], [0.5837932661603281, 491.0], [0.7402337246921062, 491.0], [0.7402337246921062, 491.0], [0.4071553901088778, 491.0], [0.26800311907726604, 491.0], [0.5837932661603281, 491.0], [0.7402337246921062, 491.0]], [[0.39510565143184745, 492.0], [0.583797065921324, 492.0], [0.325857272497648, 492.0], [0.836132755543006, 492.0], [0.40039543367236397, 492.0], [0.39510565143184745, 463.0], [0.583797065921324, 463.0], [0.325857272497648, 463.0], [0.836132755543006, 463.0], [0.40039543367236397, 463.0], [0.39510565143184745, 491.0], [0.583797065921324, 491.0], [0.325857272497648, 491.0], [0.836132755543006, 491.0], [0.40039543367236397, 491.0], [0.39510565143184745, 490.0], [0.583797065921324, 490.0], [0.325857272497648, 490.0], [0.836132755543006, 490.0], [0.40039543367236397, 490.0], [0.39510565143184745, 491.0], [0.583797065921324, 491.0], [0.325857272497648, 491.0], [0.836132755543006, 491.0], [0.40039543367236397, 491.0], [0.583797065921324, 491.0], [0.836132755543006, 491.0], [0.325857272497648, 491.0], [0.40039543367236397, 491.0], [0.836132755543006, 491.0], [0.583797065921324, 490.0], [0.836132755543006, 490.0], [0.325857272497648, 490.0], [0.40039543367236397, 490.0], [0.836132755543006, 490.0], [0.583797065921324, 491.0], [0.836132755543006, 491.0], [0.325857272497648, 491.0], [0.40039543367236397, 491.0], [0.836132755543006, 491.0], [0.583797065921324, 491.0], [0.836132755543006, 491.0], [0.325857272497648, 491.0], [0.40039543367236397, 491.0], [0.836132755543006, 491.0], [0.583797065921324, 490.0], [0.836132755543006, 490.0], [0.325857272497648, 490.0], [0.40039543367236397, 490.0], [0.836132755543006, 490.0], [0.836132755543006, 492.0], [0.836132755543006, 492.0], [0.583797065921324, 492.0], [0.325857272497648, 492.0], [0.8915274015913549, 492.0], [0.836132755543006, 491.0], [0.836132755543006, 491.0], [0.583797065921324, 491.0], [0.325857272497648, 491.0], [0.8915274015913549, 491.0], [0.836132755543006, 490.0], [0.836132755543006, 490.0], [0.583797065921324, 490.0], [0.325857272497648, 490.0], [0.8915274015913549, 490.0], [0.836132755543006, 491.0], [0.836132755543006, 491.0], [0.583797065921324, 491.0], [0.325857272497648, 491.0], [0.8915274015913549, 491.0], [0.836132755543006, 491.0], [0.836132755543006, 491.0], [0.583797065921324, 491.0], [0.325857272497648, 491.0], [0.8915274015913549, 491.0]]]
    a = np.array(a)
    for i in range(len(a)):
        a[i] = np.sort(a[i])
    # plt.plot(a[0,:,0], a[0,:,1])
    # plt.show()

    for i in range(len(a[0,0])):
        fig, ax = plt.subplots()
        # ax.set_aspect("equal")
        hist, xbins, ybins, im = ax.hist2d(a[0,:,0], a[0,:,1], bins=10)
        for i in range(len(ybins)-1):
            for j in range(len(xbins)-1):
                ax.text(xbins[j]+0.04, ybins[i]+1, hist.T[i,j], 
                        color="w", ha="center", va="center", fontweight="bold")
        plt.show()

    plt.scatter(a[0,:,0], a[0,:,1])
    plt.xlabel('Parameter Value')
    plt.ylabel('Loss')
    plt.show()
    b = 3